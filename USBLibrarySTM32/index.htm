<html>
<head>
<link rel='stylesheet' type='text/css' href='../my.css'>

<title>USBLibrarySTM32</title>
</head>

<body>
<div align=center>
<table class="my_table"><tr><td> 
<font size=-1><i><a href="../index.html">back</a></i></font>

<h2>@<a href=https://github.com/Levi--G/USBLibrarySTM32>Levi--G's USBLibrarySTM32</a></h2>
Unlike older Maple library, STM32duino USBDevice does not support composite USB for e.g. CDC + MIDI.
<dl>
<dt>USBLibrarySTM32 emulates AVR Arduino <a href=../ArduinoUSB/index.htm>PluggableUSB API</a>,
<br>effectively replacing <a href=https://github.com/stm32duino/Arduino_Core_STM32>STM32duino</a> core
<a href=https://github.com/stm32duino/Arduino_Core_STM32/tree/main/libraries/USBDevice>USBDevice library</a>
<dd>reportedly works with Arduino sketches ported to PlatformIO, but had issues in Arduino 2.
<br>- wanted to pretend that it is <code>ARDUINO_ARCH_AVR</code>;
<br> &emsp; instead, hacked <code>HID-project/src/HID-Settings.h</code> and <code>MIDIUSB/src/MIDIUSB.h</code></a>:
<pre>	- #if defined(ARDUINO_ARCH_AVR)
	+ #if defined(ARDUINO_ARCH_AVR) || defined(HAL_PCD_MODULE_ENABLED)</pre>
<br>- requires <a href=../Arduino2/USBCON.txt><code>USBCON</code></a> and <a href=../Arduino2/HAL_PCD_MODULE_ENABLED.txt><code>HAL_PCD_MODULE_ENABLED</code></a> build flags
<br> &emsp; probably set in menu based on <a href=../Arduino2/usb_flags.txt><code>usb_flags</code></a> and <a href=https://github.com/stm32duino/Arduino_Core_STM32/blob/main/platform.txt><code>platform.txt</code></a>
<br>- Arduino 2 does not see files in <code>USBLibrarySTM32/include/</code>;
<br> &emsp; moving those files to <code>USBLibrarySTM32/src/</code> fixed that.
<br>- <a href=https://github.com/Levi--G/USBLibrarySTM32/issues/6#issuecomment-3181102825>reported my experience</a>
<br>- coordination with STM32duino core USB is discussed <a href=https://github.com/orgs/stm32duino/discussions/2724#discussioncomment-13191087>here</a>;
<br> &emsp; likely integration would be as a menu option

<dd><br>This compiles with hacked <a href=https://github.com/arduino-libraries/MIDIUSB>MIDIUSB Library for Arduino</a> example sketch,
<br>but then <a href=../Arduino2/verbose.txt>failed to link because duplicated STM32duino USB library definitions</a>.

<dt><br><b>working</b> &nbsp <i>5 Sep 2025</i>
<dd>sample <a href=SerialUSB.ino>SerialUSB sketch</a> compiles, loads and runs on a Black Pill from VSCode-Arduino. then Arduino 2:
<ul><li>moved <code>USBDevice</code> folder out of <code>Arduino15/packages/STMicroelectronics/hardware/stm32/2.11.0/libraries</code>
<br> &emsp; Arduino 2 scripting wanted to use <code>USBDevice</code> source, whether referenced or not..
<li>added <code>USBLibrarySTM32</code> to <code>Documents/Arduino/libraries</code>
<li>in <code>USBLibrarySTM32</code>, moved files from <code>include</code> to <code>src</code>
<li>moved <code>SerialUSB</code> example <code>src/main.cpp</code> to <code>SerialUSB.ino</code>, added <code>build_opt.h</code>
<br> &emsp; added syncopated LED blink code to <a href=SerialUSB.ino><code>SerialUSB.ino</code></a>, for deducing execution state
<li>Arduino Serial Monitor or PuTTY can connect and pass data
<br> &emsp; initially failed, because COM8 conflict with <a href=../SerialPorts/index.htm>com0com null modem</a>
</ul>

<dt><br><details><summary>failed workarounds, leaving <code>USBDevice</code> folder in <code>Arduino15/packages/STMicroelectronics/hardware/stm32/2.11.0/libraries</code></summary>
<hr><b>STM32duino USB multiple definition</b>
<dd><a href=https://support.arduino.cc/hc/en-us/articles/360021232160-How-to-install-and-use-a-custom-core-version-in-the-IDE>install and use a custom core version</a>
<br> &emsp; <i>more details</i>:&nbsp; <a href=https://arduino.github.io/arduino-cli/1.3/platform-specification/>Platform specification</a>
<br> <a href=https://github.com/stm32duino/Arduino_Core_STM32>https://github.com/stm32duino/Arduino_Core_STM32</a>
 seemingly matches (658MB) content at
<br> &emsp; <code>AppData/Local/Arduino15/packages/STMicroelectronics/hardware/stm32/2.11.0/</code>
<p><a href=../Arduino2/USBD_Init.txt>results from <code>grep -R USBD_Init</code></a>
</p>
<dt><b>potential hack</b>, based on feedback from @Levi--G
<dd>add <code>../Arduino2/platform.local.txt</code> file in <code>packages/STMicroelectronics/hardware/stm32/2.11.0/</code>:
<br> &emsp; <code>USBDevice_include_dir=<arduinosketchfolder>/libraries/USBLibrarySTM32</code>
<br>With only this change, builds fail:
<pre>C:\Users\bleke\AppData\Local\Arduino15\packages\STMicroelectronics\hardware\stm32\2.11.0\cores\arduino/WSerial.h:7:12:
	 fatal error: USBSerial.h: No such file or directory
    7 |   #include "USBSerial.h"
      |            ^~~~~~~~~~~~~
compilation terminated.</pre>
Success requires setting <code>USB support (if available): "None"</code>, then:
<pre>$ cat MIDIUSB_loop/build_opt.h
-DUSBCON -DHAL_PCD_MODULE_ENABLED
</pre>

<dt><a href=../Arduino2/USBSerial.htm>Attempts to build a USBSerial library in user space failed</a>
<dd>Compiling STM32 core seemingly uses incompatible rules...
<dt><hr></details>

<dt><br><a href=https://warrantyvoids.github.io/ModSynth/modules/midi2cv/midi-descriptor>USB enumeration, endpoints and descriptors</a>
</dl>

<h3><a href=https://github.com/Levi--G/USBLibrarySTM32/issues/11>problematic <code>USBSerial.availableForWrite()</code></a></h3>
 &emsp; <a href=SerialLog.txt><i>hardware serial trace log</i></a>; <code>USBSerial COM</code> <i>session terminated after</i> goodbye
<p><code>USBLibrarySTM32</code> seemingly lacks means to detect COM port session disconnects;
<br> &emsp; <code>USBSerial.availableForWrite()</code> presumably reports space available when not.
<ul><li>Sending from Black Pill to e.g. PuTTY after reconnection is broken
<br> &emsp; if writes while disconnected overran its buffer
<li>No obvious means for sketch to detect session disconnections.
<li>Want to configure Black Pill composite USB device with CDC and MIDI,
<br>occasionally using CDC for logging and debugging...
</ul></p>

<a name=how>
<h3></a>How it works</h3>
This library interfaces, via <code>USBD_HandleTypeDef</code>
to <code>Arduino15/packages/STMicroelectronics/hardware/stm32/2.11.0/system/Middlewares/ST/STM32_USB_Device_Library/Core</code>,
<br> specifically <code>USBD_HandleTypeDef</code> in <code>STM32_USB_Device_Library/Core/Inc/<a href=usbd_def.h>usbd_def.h</a></code>,
as <a href=https://wiki.st.com/stm32mcu/wiki/Category:USB#STM32_USB_device_library_main_variables>described in ST's wiki</a>

<p>For <code>USBSerial</code>, <code>UDBCDC write(const uint8_t *buffer, size_t size)</code> calls <code>USB_Send(CDC_ENDPOINT_IN, buffer, size);</code>
<br><code>USB_Send()</code> calls <code>USB_SendQuick()</code>,
which grabs the CDC endpoint buffer class instance and invokes its <code>Write</code> method,
<br>then, if endpoint state is <code>HID_IDLE</code>, invokes <code>USB_SendTXBufferUnsafe()</code>,
<br>which invokes <code>USBD_LL_Transmit()</code>, which calls <code>HAL_PCD_EP_Transmit()</code>,
<br>which will be in <code>STMicroelectronics/hardware/stm32/2.11.0/system/Drivers/</code> for the appropriate chip type.
<br>Curiously, this release "Remove Lock mechanism from HAL_PCD_EP_Transmit() and HAL_PCD_EP_Receive() APIâ€™s"...
<br><code>HAL_PCD_EP_Transmit()</code> returns <code>HAL_StatusTypeDef</code>, which gets ignored.
</p>
<code>After <code>USB_SendQuick()</code>, <code>USB_Send()</code> calls <code>USB_Flush_Internal()</code>,
<br>but ignores its return code.  <code>USB_Flush_Internal()</code> does nothing
<br>if <code>USB_SendAvailable_Internal()</code> returns true.

<p><code>USBLibrarySTM32</code> seemingly handles only fixed size buffers;
<br>if only 1 byte is written, a full 64-byte buffer is used.
<br>Thus, <code>availableForWrite()</code> returns either <code>USB_EP_SIZE</code>  or 0.
</p>
<h3>Because default <code>PACKETBUFFER_ALLOW_OVERWRITE</code> is true,<br>
 &emsp; <code>availableForWrite()</code> always returns <code>USB_EP_SIZE</code></h3>
<pre>int USBCDC::availableForWrite(void)
{
  return USB_SendAvailable(CDC_ENDPOINT_OUT) ? USB_EP_SIZE : 0;
}

static bool USB_SendAvailable_Internal(USBD_HID_HandleTypeDef *&hhid, uint8_t endp)
{
  uint8_t ep = SMALL_EP(endp);
#if PACKETBUFFER_USE_TX_BUFFERS
  if (EP_Buffers[ep] != NULL && (!EP_Buffers[ep]->isFull() || PACKETBUFFER_ALLOW_OVERWRITE))
  {
    return true;
  }
#endif 

</td></tr><tr><td align=center>
maintained by <a href="https://github.com/blekenbleu">blekenbleu</a><br>
</td></tr></table></div> 
</body></html>
